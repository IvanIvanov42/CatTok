@inherits LayoutComponentBase

@inject IJSRuntime JS
@inject IUserScrollingService UserScrollingService
@inject AuthenticationState AuthenticationState
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div @onwheel="OnScroll" style="overflow-y: auto; height: 100vh;" @ref="mainLayoutRef">
    <div class="d-flex justify-content-between align-items-center pt-2 px-5 mb-0">
        <div><a href="/"><img src="./img/Logo.png" style="width:56px" /></a></div>
        <div><a href="https://instagram.com/@SelectedUsername" style="text-decoration:none">@@@SelectedUsername</a></div>
        <div class="row">
            <div class="col" @onclick="@(() => Modal.Show<Information>(options))">
                <img src="img/info.svg" style="width:36px; height:auto; cursor: pointer;" />
            </div>
            @if (AuthenticationState.IsLoggedIn)
            {
                <div class="col" @onclick="LogoutAsync">
                    <img src="img/Logout.png" style="width:36px; height:auto; cursor: pointer;" />
                </div>
            }
            else
            {
                <div class="col" @onclick="@(() => Modal.Show<UserAuth>(options))">
                    <img src="img/Login.png" style="width:36px; height:auto; cursor: pointer;" />
                </div>
            }
        </div>
    </div>

    <main class="px-5 py-2">
        @Body
    </main>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    ModalOptions options = new ModalOptions()
        {
            Size = ModalSize.Large,
            HideCloseButton = true,
            HideHeader = true
        };
    public string SelectedUsername { get; set; }

    private ElementReference mainLayoutRef;
    private DotNetObjectReference<MainLayout>? _objRef;

    protected override async Task OnInitializedAsync()
    {
        await UserScrollingService.InitializeAsync();
        UpdateSelectedUsername();
        UserScrollingService.OnUserChanged += UpdateSelectedUsername;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeInteractionListeners", _objRef);
        }
    }

    private async Task LogoutAsync()
    {
        await AuthenticationService.LogoutAsync();
        NavigationManager.NavigateTo("/", true);
    }

    private void UpdateSelectedUsername()
    {
        SelectedUsername = UserScrollingService.SelectedUser?.InstagramUsername ?? string.Empty;
        StateHasChanged();
    }

    private async Task OnScroll(WheelEventArgs e)
    {
        var scrollInfo = await JS.InvokeAsync<ScrollInfo>("getScrollInfo", mainLayoutRef);

        // Scrolling down
        if (e.DeltaY > 0)
        {
            if (scrollInfo.scrollTop + scrollInfo.clientHeight >= scrollInfo.scrollHeight - 1)
            {
                if (UserScrollingService.HasNextUser)
                {
                    var userChanged = UserScrollingService.LoadNextUser();
                    if (userChanged)
                    {
                        await JS.InvokeVoidAsync("scrollToTop", mainLayoutRef);
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("scrollToBottom", mainLayoutRef);
                }
            }
        }
        // Scrolling up
        else if (e.DeltaY < 0)
        {
            if (scrollInfo.scrollTop <= 0)
            {
                if (UserScrollingService.HasPreviousUser)
                {
                    var userChanged = UserScrollingService.LoadPreviousUser();
                    if (userChanged)
                    {
                        await JS.InvokeVoidAsync("scrollToBottom", mainLayoutRef);
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("scrollToTop", mainLayoutRef);
                }
            }
        }
    }

    [JSInvokable("OnSwipeUp")]
    public async Task OnSwipeUp()
    {
        if (UserScrollingService.HasNextUser)
        {
            var userChanged = UserScrollingService.LoadNextUser();
            if (userChanged)
            {
                await JS.InvokeVoidAsync("scrollToTop", mainLayoutRef);
            }
        }
        else
        {
            await JS.InvokeVoidAsync("scrollToBottom", mainLayoutRef);
        }
    }

    [JSInvokable("OnSwipeDown")]
    public async Task OnSwipeDown()
    {
        if (UserScrollingService.HasPreviousUser)
        {
            var userChanged = UserScrollingService.LoadPreviousUser();
            if (userChanged)
            {
                await JS.InvokeVoidAsync("scrollToBottom", mainLayoutRef);
            }
        }
        else
        {
            await JS.InvokeVoidAsync("scrollToTop", mainLayoutRef);
        }
    }

    public void Dispose()
    {
        if (_objRef != null)
        {
            JS.InvokeVoidAsync("removeInteractionListeners");
            _objRef.Dispose();
        }
    }
}

@page "/auth"
@inject NavigationManager NavigationManager
@inject IInstagramService InstagramService

@code {
    [SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Code))
        {
            try
            {
                var response = await InstagramService.SendAuthorizationToken(Code);
                if (response.IsSuccessStatusCode)
                {
                    var postData = await InstagramService.PostInstagramData();
                    if (postData.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Message: {postData}");
                        NavigationManager.NavigateTo("/");
                    }
                    else
                    {
                        var result = await postData.Content.ReadAsStringAsync();
                        Console.WriteLine($"Error posting data: {result}");
                    }
                }
                else
                {
                    var result = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error getting authorization token: {result}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Authorization code not found.");
        }
    }
}

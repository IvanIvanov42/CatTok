@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject AuthenticationState AuthenticationState
@inject IInstagramService InstagramService
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row">
        <h1 class="text-center">CatTok</h1>
    </div>
    <div class="row">
        <p style="font-size:20px;">
            CatTok is the best website in the world!<br />
            Embark on an adventure to uncover a myriad of enchanting felines!
        </p>

        <div>
            @if (AuthenticationState.IsLoggedIn)
            {
                if (isInstagramConnected)
                {
                    <p>Hi @username</p>
                    <p>Your cat's Instagram is connected!</p>
                    <p>meow @instagramUsername</p>
                    <button class="btn btn-outline-dark btn-lg" type="button" @onclick="DisconnectInstagram">Disconnect</button>
                }
                else
                {
                <p>How to show-off your cat?</p>
                <ul style="list-style-image: url('img/cat.svg');">
                    <li>Connect your cat’s IG account!</li>
                    <li>Use a spare phone to showcase your cat!</li>
                </ul>
                <div class="row justify-content-center" style="margin-top: 60px;">
                    <button class="btn btn-outline-dark btn-lg" type="button" @onclick="CallInstagram">Connect</button>
                </div>
            }
            }
            else
            {
                <p>Please log in to connect your cat!</p>
                <Login />
                <p>No account?</p>
                <div @onclick="@(() => Modal.Show<Register>(options))">SIGN UP</div>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    ModalOptions options = new ModalOptions()
        {
            Size = ModalSize.Large,
            HideCloseButton = true,
            HideHeader = true
        };

    private bool isInstagramConnected;
    private string? instagramUsername;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState.AuthenticationStateChanged += StateHasChanged;
        await CheckInstagramConnection();
        username = await LocalStorage.GetItemAsync<string>("username");
        instagramUsername = await LocalStorage.GetItemAsync<string>("InstagramUsername");
    }

    public void Dispose()
    {
        AuthenticationState.AuthenticationStateChanged -= StateHasChanged;
    }

    private async Task CheckInstagramConnection()
    {
        if (AuthenticationState.IsLoggedIn)
        {
            isInstagramConnected = await InstagramService.IsUserConnected();
        }
    }

    private async Task DisconnectInstagram()
    {
        var response = await InstagramService.UnauthorizeUser();
        if (response.IsSuccessStatusCode)
        {
            await LocalStorage.RemoveItemAsync("InstagramUsername");
            await LocalStorage.SetItemAsync("isInstagramConnected", false);

            isInstagramConnected = false;
            instagramUsername = null;

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Failed to disconnect Instagram account.");
        }
    }

    protected void CallInstagram()
    {
        var clientId = "218400594602757";
        var redirectUri = "https://cattoka.azurewebsites.net/auth";

        NavigationManager.NavigateTo($"https://api.instagram.com/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope=user_profile,user_media&response_type=code");
    }
}

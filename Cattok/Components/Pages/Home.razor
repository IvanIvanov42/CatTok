@page "/"
@inject IStreamingService StreamingService
@inject IUserScrollingService UserScrollingService

<div class="container-fluid text-center">
    <div class="row">
        @if (SelectedUser != null)
        {
            if (isUserStreaming)
            {
                <div class="row">
                    <div class="col-md-4">
                        <MediaDisplay Medias="@SelectedUser.Medias.Take(SelectedUser.Medias.Count / 2).ToList()" />
                    </div>
                    <div class="col-md-4">
                        <Viewer StreamerId="@SelectedUser.Id" />
                    </div>
                    <div class="col-md-4">
                        <MediaDisplay Medias="@SelectedUser.Medias.Skip(SelectedUser.Medias.Count / 2).ToList()" />
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-md-12">
                        <MediaDisplay Medias="@SelectedUser.Medias" />
                    </div>
                </div>
            }
        }
        else
        {
            <p>@ErrorMessage</p>
        }
    </div>
</div>

@code {
    private InstagramUser? SelectedUser { get; set; }
    private bool isUserStreaming = false;
    public string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        UserScrollingService.OnUserChanged += OnUserChanged;
        SelectedUser = UserScrollingService.SelectedUser;
        StreamingService.OnActiveStreamsUpdated += OnActiveStreamsUpdated;
        await UpdateIsUserStreaming();
    }

    private async void OnUserChanged()
    {
        SelectedUser = UserScrollingService.SelectedUser;
        await UpdateIsUserStreaming();
        StateHasChanged();
    }

    private async Task UpdateIsUserStreaming()
    {
        var activeStreams = await StreamingService.GetActiveStreamsAsync();
        isUserStreaming = SelectedUser != null && activeStreams.Contains(SelectedUser.Id);
    }

    private void OnActiveStreamsUpdated(List<string> streams)
    {
        if (SelectedUser != null)
        {
            bool wasStreaming = isUserStreaming;
            isUserStreaming = streams.Contains(SelectedUser.Id);

            if (isUserStreaming != wasStreaming)
            {
                InvokeAsync(StateHasChanged);
            }
        }
    }

    public void Dispose()
    {
        UserScrollingService.OnUserChanged -= OnUserChanged;
        StreamingService.OnActiveStreamsUpdated -= OnActiveStreamsUpdated;
    }
}

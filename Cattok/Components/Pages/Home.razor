@page "/"
@inject IInstagramService InstagramService

<div class="container-fluid text-center" @onwheel="OnScroll">
    <div class="row">
        <div class="col-md-12">
            @if (SelectedUser != null)
            {
                <MediaDisplay Medias="@SelectedUser.Medias" />
            }
            else
            {
                <p>@ErrorMessage</p>
            }
        </div>
    </div>
</div>

@code {
    private List<InstagramUser>? Users { get; set; }
    private InstagramUser? SelectedUser { get; set; }
    private int CurrentUserIndex { get; set; } = 0;
    public string? ErrorMessage { get; set; }

    [CascadingParameter] public string? SelectedUsername { get; set; }
    [CascadingParameter] public Action<string>? SetSelectedUsername { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = "Loading...";

            var users = await InstagramService.GetUsersWithMediaAsync();

            if (users != null && users.Any())
            {
                Users = users.ToList();
                SelectedUser = Users[CurrentUserIndex];
                SetSelectedUsername?.Invoke(SelectedUser.InstagramUsername);
            }

            ErrorMessage = null;
        }
        catch
        {
            ErrorMessage = "Failed to retrieve data.";
        }
    }

    private void OnScroll(WheelEventArgs e)
    {
        if (e.DeltaY > 0) // Scrolling down
        {
            LoadNextUser();
        }
        else if (e.DeltaY < 0) // Scrolling up
        {
            LoadPreviousUser();
        }
    }

    private void LoadNextUser()
    {
        if (Users != null && CurrentUserIndex < Users.Count - 1)
        {
            CurrentUserIndex++;
            SelectedUser = Users[CurrentUserIndex];
            SetSelectedUsername?.Invoke(SelectedUser.InstagramUsername);
            StateHasChanged();
        }
    }

    private void LoadPreviousUser()
    {
        if (Users != null && CurrentUserIndex > 0)
        {
            CurrentUserIndex--;
            SelectedUser = Users[CurrentUserIndex];
            SetSelectedUsername?.Invoke(SelectedUser.InstagramUsername);
            StateHasChanged();
        }
    }
}

@page "/"
@inject IStreamingService StreamingService
@inject IInstagramService InstagramService

<div class="container-fluid text-center" @onwheel="OnScroll">
    <div class="row">
        @if (SelectedUser != null)
        {
            if (isUserStreaming)
            {
                <div class="row">
                    <div class="col-md-4">
                        <MediaDisplay Medias="@SelectedUser.Medias.Take(SelectedUser.Medias.Count / 2).ToList()" />
                    </div>
                    <div class="col-md-4">
                        <Viewer StreamerId="@SelectedUser.Id" />
                    </div>
                    <div class="col-md-4">
                        <MediaDisplay Medias="@SelectedUser.Medias.Skip(SelectedUser.Medias.Count / 2).ToList()" />
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-md-12">
                        <MediaDisplay Medias="@SelectedUser.Medias" />
                    </div>
                </div>
            }
        }
        else
        {
            <p>@ErrorMessage</p>
        }
    </div>
</div>

@code {
    private List<InstagramUser>? Users { get; set; }
    private InstagramUser? SelectedUser { get; set; }
    private int CurrentUserIndex { get; set; } = 0;
    public string? ErrorMessage { get; set; }
    private bool isUserStreaming = false;

    [CascadingParameter] public string? SelectedUsername { get; set; }
    [CascadingParameter] public Action<string>? SetSelectedUsername { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            ErrorMessage = "Loading...";

            var users = await InstagramService.GetUsersWithMediaAsync();

            if (users != null && users.Any())
            {
                Users = users.ToList();
                SelectedUser = Users[CurrentUserIndex];
                SetSelectedUsername?.Invoke(SelectedUser.InstagramUsername);
                await UpdateIsUserStreaming();
            }

            ErrorMessage = null;
        }
        catch
        {
            ErrorMessage = "Failed to retrieve data.";
        }

        // Subscribe to streaming events
        StreamingService.OnActiveStreamsUpdated += OnActiveStreamsUpdated;
    }

    private async Task UpdateIsUserStreaming()
    {
        var activeStreams = await StreamingService.GetActiveStreamsAsync();
        isUserStreaming = SelectedUser != null && activeStreams.Contains(SelectedUser.Id);
        StateHasChanged();
    }

    private void OnActiveStreamsUpdated(List<string> streams)
    {
        isUserStreaming = SelectedUser != null && streams.Contains(SelectedUser.Id);
        StateHasChanged();
    }

    private async Task OnScroll(WheelEventArgs e)
    {
        if (e.DeltaY > 0) // Scrolling down
        {
            LoadNextUser();
        }
        else if (e.DeltaY < 0) // Scrolling up
        {
            LoadPreviousUser();
        }

        await UpdateIsUserStreaming();
    }

    private void LoadNextUser()
    {
        if (Users != null && CurrentUserIndex < Users.Count - 1)
        {
            CurrentUserIndex++;
            SelectedUser = Users[CurrentUserIndex];
            SetSelectedUsername?.Invoke(SelectedUser.InstagramUsername);
            StateHasChanged();
        }
    }

    private void LoadPreviousUser()
    {
        if (Users != null && CurrentUserIndex > 0)
        {
            CurrentUserIndex--;
            SelectedUser = Users[CurrentUserIndex];
            SetSelectedUsername?.Invoke(SelectedUser.InstagramUsername);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        StreamingService.OnActiveStreamsUpdated -= OnActiveStreamsUpdated;
    }
}
